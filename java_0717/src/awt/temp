public class 'awt패키지의 Component'(){

public '1.TextField'(){//한줄의 텍스트를 입력받는 클래스
     String [] 1)Constructor/*생성자*/ = {TextField, TextField(int columns), TextField(String Text), 
                                       TextField(String text, int columns)}
     String [] 2)주요메소드 = {void setEchoChar(char c)// 화면에 보여지는 글자를 설정
                          ,String getText()// 입력된 문자열 가져오기
                          ,void setText(String str)// str로 텍스트 필드 내용 채우기
      }
public '2.TextArea'(){//여러 줄을 입력 받을 수 있는 Component
      String [] 1)Constructor = {TextArea() // 행 수와 열 수를 지정하지 않은 텍스트 영역, 
                                TextArea(int row, int columns)// 행 수, 열 수를 지정
                                TextArea(String text)// 텍스트를 설정
                                TextArea(String text, int rows, int columns) // 텍스트와 행 수 및 열 수를 지정
                                TextArea(String text, int rows, int columns, int scrollbars)// 텍스트와 행 수
                                                             및 열 수를 지정하고 스크롤 바 표시 여부를 설정, 스크롤 바는 정수이지만 TextArea의 상수로 설정해야 한다}
      String [] 2)주요메소드 = {void append(String str), String getText()}
      
      
      }
public '3.ScrollBar'(){//범위 내의 값을 입력받기 위한 Component}         
public '4.ScrollPane'(){//출력 영역 보다 더 큰 컴포넌트를 출력하기 위한 Container, 출력 영역 보다 더 큰 컴포넌트를 Panel 이나 Frame에 바로
                       //배치하면 출력영역 이외의 역역은 잘려서 출력 되지 않는다, 이런 경우 Scroll에 배치 한 후 출력해야 스크롤 바가 만들어져 나머지 영역도 볼 수 있다.}
public '5.Canvas'(){ //별도의 출력 영역을 만드는 것으로 이미지나 그림을 그리고자 할 때 사용한다.}                                   
public '6.Menu'(){Menu bar, Menu, MenuItem, CheckboxMenuItem}
                 //MenuBar는 Frame에 배치하고 Menu를 MenuBar나  Menu에 배치하고 MenuItem은 Menu에 배치 
                //PopupMenu는 마우스 오른쪽 버튼을 눌렀을 때 보여지는 메뉴
public '7.FileDialog'() {// 파일 열기와 저장을 위한 대화상자, 자주사용하기 때문에 API에서 제공합니다
            
}

public class '배치관리자 -Layout'(){ // Contatiner에 Component들을 어떤 식으로 배치할 것인지를 설정하는 것.
                                 // Frame이나 Panel의 setLayout 메소드를 이용해서 설정 Panel의 경우는 생성자에 Layout인스턴스를 대입해서 생성할 수 도 있습니다.
public '1.FlowLayout'(){//Panel의 기본 레이아웃으로 수평으로 순서대로 배치하고 옆으로 더 이상 배치 할 수 없으면 아래에 배치하는 방식}
public '2.BorderLayout'(){//Frame의 기본 레이아웃으로 5개의 영역으로 나누어서 배치, 각 영역에는 하나의 Component만 배치가 가능
                         //하나의 영역에 여러 개를 배치하고자 하면 Panel을 만들어서 여러 개를 배치 한후 다시 배치하면 됩니다.}
                        //각 영역의 이름은 Center, North, South, West, East입니다.
                       //영역에 컴포넌트를 배치할 때는 add("영역이름", 컴포넌트)의 형태이며 영역이름을 생략하면 Center에 배치됩니다.
                      //컴포넌트가 배치되지 않은 영역은 Center에 포함됩니다.
      }                                              
public '3.GridLayout'(){//표 처럼 격자를 만들어서 컴포넌트를 배치하는 레이아웃
                       //모든 셀의 크기는 동일하고 하나의 셀에는 하나의 컴포넌트만 배치할 수 있습니다.
                      //add를 호출하면 순서대로 배치가 됩니다.
                     //셀이 부족하면 행과 열의 수를 조정합니다.
                    //생성자에 행과 열의 수를 대입할 수 있고 셀의 가로와 세로여백을 설정할 수 있습니다
      }
public '4.null'(){//레이아웃을 설정하지 않는 것으로 컴포넌트의 크기와 위치를 개발자가 직접 설정해야 하는 레이아웃이다.
                 //권장하지는 않지만 컴포넌트를 움직이거나 크기 조절을 하고자 하는 경우에 사용합니다.                        
      }
}

public Class 'java.awt의 이벤트 처리'(){ //swing, android가 동일한 방식으로 처리
                                    //event = 사용자 또는 프로그램에 의해 발생하는 사건
                                   //Listner = 이벤트를 처리해 줄 수 있는 인스턴스
                                  //EventHandler = 이벤트가 발생했을 때 호출되는 함수 또는 인스턴스
                                 //awt는 이벤트가 발생하면 jvm에게 이벤트가 전달되고 jvm은 이 이벤트 객체를 가지고 등록된 리스너는 찾아서 이벤트 핸들러를 호출합니다.
                                //이벤트 리스너 등록 = 컴포넌트.add이벤트 리스너(이벤트 리스너 인스턴스);
      public '1.ActionLister 인터페이스(){
      //버튼을 클릭하거나 메뉴또는 리스트를 선택하거나 텍스트필드에서 Enter를 눌렀을 때 발생하는 이벤트를 처리하기 위한 인터페이스
      } 
      public '2.Event Routing'(){//여러 컴포넌트의 이벤트를 하나의 리스너가 처리하도록 만드는 것
                                // 이것이 가능한 이유는 이벤ㅌ르르 처리하는 메소드의 매개변수가 이벤트가 발생한 객체의 주소를 가직고 있기때문
                                                                 이벤트 객체의 getSource()를 호출하면 이벤트가 발생한 객체의 주소를 알 수 있습니다.}                           
                              //ActionEvent의 경우는 getActionCommand()를 호출하면 이벤트가 발생한 객체의 문자열을 리턴해주닙니다.
                               /버튼의경우는 버튼에 작성한 타이틀을 메뉴에 보여지는 문자열을 리턴합니다. 
      public '3.ItemEvent'(){//CheckBox나 Radio Button을 선택했을 떄 그리고 ComboBox에서 항목을 선택했을 때 발생하는 이벤트를
                              /처리하기 위한 리스너
                           //ItemEvent 클래스의 인스턴스가 이벤트에 대한 정보를 가지고 있습니다.
                          //체크박스를 선택하면 선택한 체크박스의 문자열과 상태를 텍스트 영역에 출력하고 카테고리 콤보박스를 선택하면 
                           /카테고리 내에 항목을 세부내용 콤보박스에 출력하고 버튼을 누르면 선택한 콤보박스의 항목을 텍스트 영역에 출력하기
                            1.윈도우를 만들어 출력하기 //윈도우 클래스 만들기. - frame으로 부터 상속받은 클래스 생성
                                                                  - main메소드에서 앞에서 만든 클래스의 인스턴스를 생성
                            2.윈도우에 컴퍼넌트를 배치
                            3.이벤트를 처리  //setVisible 호출 전에 추가
      }                      
      public '버튼을 눌렀을 때를 처리해주는 리스너: ActionListener'(){
      
      1.ActionListener 인스턴스 만들기
      2.사용할 컴포넌트와 연결
      }                        
}

public class 'GUI이벤트 처리'(){//이벤트를 처리하는 리스너를 찾아야 합니다.     

}

Eclipse 설치
java se jdk를 설치
EE Developers 설치

path, JAVA_HOME, JRE_HOME이라는 환경 변수를 설정